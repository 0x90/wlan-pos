#!/bin/bash
#usage: basename [OPTION] 
VER=0.1

# Default init
aio=0
start_spid=1
stop_spid=1
runtimes=30
fakegps=1

Version ()
{
    cat <<VER

GNU `basename $0` version $VER, by Yan Xiaotian
Built on i686-ubuntu-linux-gnu
Copyright (C) `date +%Y` Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

Report bugs to <xiaotian.yan@gmail.com>.

VER
    exit 0
}
Usage()
{
	cat <<HELP

run -- WLAN location fingerprinting running script.

USAGE: run [OPTION] ...
OPTION: 
-a     all in one processing(default: no)
-f     start spid number(included)(default: 1)
-g     offline fake GPS receiving(default: yes)
-h     show this help
-o     only offline calibration and processing(default: yes)
-r     number of samples for each spid(default: 30)
-t     stop spid number(included)(default: 1)
-v     show version information

EXAMPLE:
Offline radio map generation for spid from 1 to 100(60 scans each, 
with fake GPS enabled), followed by online locationing.
#run -a -g -f 1 -t 100 -r 60

HELP
	exit 0
}

[ $# -eq 0 ] && Usage
#x=1   # Avoids an error if we get no options at all.
while getopts "af:ghor:t:v" opt; do
    OPTERR=0 #error msg shutup
    case $opt in
        a ) aio=1 ;;
        f ) start_spid=$OPTARG ;;
        g ) fakegps=1 ;;
        h ) Usage ;;
        o ) aio=0 ;;
        r ) runtimes=$OPTARG ;;
        t ) stop_spid=$OPTARG ;;
        v ) Version ;;
        * )
			echo -e "\nSorry, option: '$@' NOT supported~!"
            Usage
        ;;
    esac
  x=$OPTIND
done
#shift $(($x-1))
#echo "Left overs: $@"
#exit 0

[ $fakegps = 1 ] && offopts="-v -f" || offopts="-v "
onopts="-v "
date=`date +%Y-%m%d`

for spid in $(seq $start_spid $stop_spid)
do
	./offline.py $offopts -s $runtimes -i $spid
	spidfmt=`printf '%06d' $spid`
	rawfilename=$date-$spidfmt.raw
	./offline.py $onopts -t dat/$rawfilename
	echo "--------------------------------"
done
#echo
#rmpfilename=$date.rmp
#./online.py -v -i dat/$rmpfilename
#echo


exit 0
RUNTIME=10
RUNFILE=offline.py
LOGPATH=log

if [ $# -lt 1 ]; then
    date=`date +%Y%m%d-%H%M%S`
    echo -e "\nTime: $date\n"
    LOGFILE=$LOGPATH/log-$date
    declare -a LOGFILES=( $LOGFILE )
    [ -d ${LOGPATH} ] || mkdir ${LOGPATH}
    [ -f ${LOGFILE} ] && mv -f ${LOGFILE} ${LOGFILE}.bak
    for x in $(seq ${RUNTIME})
    do
        echo "Survey $x:"
        sudo python ${RUNFILE} |tee -a ${LOGFILE}
        echo "-------------------------------------------------------------"
    done
else
	declare -a LOGFILES=( "$@" )
fi 


for LOGFILE in ${LOGFILES[@]}
do
    echo -ne "\nChecking ${LOGFILE##*/} ... "
    #Integrity checking.
    stat_gga=`grep -e 'GGA' ${LOGFILE} |wc -l`
    stat_gll=`grep -e 'GLL' ${LOGFILE} |wc -l`
    #stat_rmc=`grep -e 'RMC' ${LOGFILE} |wc -l`
    stat_all=`expr ${stat_gga} + ${stat_gll}`

    stat_loc_all=`echo "($stat_all) * 2" |bc`
    stat_loc_mline=`grep -e '^ *116' -e '^ *39' ${LOGFILE} |wc -l`
    stat_loc_sline_noap=`sed -n "/^\['[0-9]*\-[0-9]*', 116\.[0-9]*, 39\.[0-9]*, \[\]]/p" ${LOGFILE} |wc -l`
    stat_loc_all=`echo "(${stat_loc_mline}) + (${stat_loc_sline_noap}) * 2" |bc`
    echo "OK"

    printf "Total scan: %16d\n" ${stat_all}
    echo "-------------------------------"
    printf "GGA: %23d\nGLL: %23d\nRMC: %23d\n" ${stat_gga} ${stat_gll} ${stat_rmc}
    printf "Lat/Lon OK: %13d/%02d\n" ${stat_loc_all} ${stat_loc_all}
    printf "WLAN scan OK: %11d/%02d\n" `expr ${stat_all} - ${stat_loc_sline_noap}` ${stat_all}
    echo -e "-------------------------------\n"
done
